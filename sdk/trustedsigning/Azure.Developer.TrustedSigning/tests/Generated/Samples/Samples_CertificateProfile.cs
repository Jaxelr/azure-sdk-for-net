// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Developer.TrustedSigning.Samples
{
    public partial class Samples_CertificateProfile
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CertificateProfileOperations_GetSigningStatus_GetsTheStatusOfACodesignOperation()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            CertificateProfile client = new TrustedSigningClient(endpoint, credential).GetCertificateProfileClient(apiVersion: "2023-06-15-preview");

            Response response = client.GetSigningStatus("YourAccountName", "YourCertificateProfileName", "9797c668-5b3c-4586-8e0c-2768c8160bad", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CertificateProfileOperations_GetSigningStatus_GetsTheStatusOfACodesignOperation_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            CertificateProfile client = new TrustedSigningClient(endpoint, credential).GetCertificateProfileClient(apiVersion: "2023-06-15-preview");

            Response response = await client.GetSigningStatusAsync("YourAccountName", "YourCertificateProfileName", "9797c668-5b3c-4586-8e0c-2768c8160bad", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CertificateProfileOperations_GetSigningStatus_GetsTheStatusOfACodesignOperation_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            CertificateProfile client = new TrustedSigningClient(endpoint, credential).GetCertificateProfileClient(apiVersion: "2023-06-15-preview");

            Response<OperationStatusSignResultError> response = client.GetSigningStatus("YourAccountName", "YourCertificateProfileName", "9797c668-5b3c-4586-8e0c-2768c8160bad");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CertificateProfileOperations_GetSigningStatus_GetsTheStatusOfACodesignOperation_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            CertificateProfile client = new TrustedSigningClient(endpoint, credential).GetCertificateProfileClient(apiVersion: "2023-06-15-preview");

            Response<OperationStatusSignResultError> response = await client.GetSigningStatusAsync("YourAccountName", "YourCertificateProfileName", "9797c668-5b3c-4586-8e0c-2768c8160bad");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CertificateProfileOperations_GetSignRootCertificate_GetsTheCodesigningRootCertificateOnTheCertificateChainForThatAccountAndProfileName()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            CertificateProfile client = new TrustedSigningClient(endpoint, credential).GetCertificateProfileClient(apiVersion: "2023-06-15-preview");

            Response response = client.GetSignRootCertificate("YourAccountName", "YourCertificateProfileName", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CertificateProfileOperations_GetSignRootCertificate_GetsTheCodesigningRootCertificateOnTheCertificateChainForThatAccountAndProfileName_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            CertificateProfile client = new TrustedSigningClient(endpoint, credential).GetCertificateProfileClient(apiVersion: "2023-06-15-preview");

            Response response = await client.GetSignRootCertificateAsync("YourAccountName", "YourCertificateProfileName", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CertificateProfileOperations_GetSignRootCertificate_GetsTheCodesigningRootCertificateOnTheCertificateChainForThatAccountAndProfileName_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            CertificateProfile client = new TrustedSigningClient(endpoint, credential).GetCertificateProfileClient(apiVersion: "2023-06-15-preview");

            Response<BinaryData> response = client.GetSignRootCertificate("YourAccountName", "YourCertificateProfileName");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CertificateProfileOperations_GetSignRootCertificate_GetsTheCodesigningRootCertificateOnTheCertificateChainForThatAccountAndProfileName_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            CertificateProfile client = new TrustedSigningClient(endpoint, credential).GetCertificateProfileClient(apiVersion: "2023-06-15-preview");

            Response<BinaryData> response = await client.GetSignRootCertificateAsync("YourAccountName", "YourCertificateProfileName");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ExtendedKeyUsage_GetExtendedKeyUsages_GetsAListOfExtendedKeyUsageObjectIdentifiersThatAreAllowed()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            CertificateProfile client = new TrustedSigningClient(endpoint, credential).GetCertificateProfileClient(apiVersion: "2023-06-15-preview");

            foreach (BinaryData item in client.GetExtendedKeyUsages("YourAccountName", "YourCertificateProfileName", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("eku").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ExtendedKeyUsage_GetExtendedKeyUsages_GetsAListOfExtendedKeyUsageObjectIdentifiersThatAreAllowed_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            CertificateProfile client = new TrustedSigningClient(endpoint, credential).GetCertificateProfileClient(apiVersion: "2023-06-15-preview");

            await foreach (BinaryData item in client.GetExtendedKeyUsagesAsync("YourAccountName", "YourCertificateProfileName", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("eku").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ExtendedKeyUsage_GetExtendedKeyUsages_GetsAListOfExtendedKeyUsageObjectIdentifiersThatAreAllowed_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            CertificateProfile client = new TrustedSigningClient(endpoint, credential).GetCertificateProfileClient(apiVersion: "2023-06-15-preview");

            foreach (ExtendedKeyUsage item in client.GetExtendedKeyUsages("YourAccountName", "YourCertificateProfileName"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ExtendedKeyUsage_GetExtendedKeyUsages_GetsAListOfExtendedKeyUsageObjectIdentifiersThatAreAllowed_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            CertificateProfile client = new TrustedSigningClient(endpoint, credential).GetCertificateProfileClient(apiVersion: "2023-06-15-preview");

            await foreach (ExtendedKeyUsage item in client.GetExtendedKeyUsagesAsync("YourAccountName", "YourCertificateProfileName"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CertificateProfileOperations_Sign_SubmitACodesignOperation()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            CertificateProfile client = new TrustedSigningClient(endpoint, credential).GetCertificateProfileClient(apiVersion: "2023-06-15-preview");

            using RequestContent content = RequestContent.Create(new
            {
                signatureAlgorithm = "RS256",
                digest = "TG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQ=",
                fileHashList = new object[]
            {
"Y29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0",
"c2VkIGRvIGVpdXNtb2QgdGVtcG9yIGluY2lkaWR1bnQ="
            },
                authenticodeHashList = new object[]
            {
"dXQgbGFib3JlIGV0IGRvbG9yZSBtYWduYSBhbGlxdWE=",
"IFV0IGVuaW0gYWQgbWluaW0gdmVuaWFt"
            },
            });
            Operation<BinaryData> operation = client.Sign(WaitUntil.Completed, "YourAccountName", "YourCertificateProfileName", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CertificateProfileOperations_Sign_SubmitACodesignOperation_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            CertificateProfile client = new TrustedSigningClient(endpoint, credential).GetCertificateProfileClient(apiVersion: "2023-06-15-preview");

            using RequestContent content = RequestContent.Create(new
            {
                signatureAlgorithm = "RS256",
                digest = "TG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQ=",
                fileHashList = new object[]
            {
"Y29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0",
"c2VkIGRvIGVpdXNtb2QgdGVtcG9yIGluY2lkaWR1bnQ="
            },
                authenticodeHashList = new object[]
            {
"dXQgbGFib3JlIGV0IGRvbG9yZSBtYWduYSBhbGlxdWE=",
"IFV0IGVuaW0gYWQgbWluaW0gdmVuaWFt"
            },
            });
            Operation<BinaryData> operation = await client.SignAsync(WaitUntil.Completed, "YourAccountName", "YourCertificateProfileName", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CertificateProfileOperations_Sign_SubmitACodesignOperation_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            CertificateProfile client = new TrustedSigningClient(endpoint, credential).GetCertificateProfileClient(apiVersion: "2023-06-15-preview");

            SigningPayloadOptions body = new SigningPayloadOptions(SignatureAlgorithm.RS256, BinaryData.FromObjectAsJson("TG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQ="))
            {
                FileHashList = { BinaryData.FromObjectAsJson("Y29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0"), BinaryData.FromObjectAsJson("c2VkIGRvIGVpdXNtb2QgdGVtcG9yIGluY2lkaWR1bnQ=") },
                AuthenticodeHashList = { BinaryData.FromObjectAsJson("dXQgbGFib3JlIGV0IGRvbG9yZSBtYWduYSBhbGlxdWE="), BinaryData.FromObjectAsJson("IFV0IGVuaW0gYWQgbWluaW0gdmVuaWFt") },
            };
            Operation<SignResult> operation = client.Sign(WaitUntil.Completed, "YourAccountName", "YourCertificateProfileName", body);
            SignResult responseData = operation.Value;
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CertificateProfileOperations_Sign_SubmitACodesignOperation_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            CertificateProfile client = new TrustedSigningClient(endpoint, credential).GetCertificateProfileClient(apiVersion: "2023-06-15-preview");

            SigningPayloadOptions body = new SigningPayloadOptions(SignatureAlgorithm.RS256, BinaryData.FromObjectAsJson("TG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQ="))
            {
                FileHashList = { BinaryData.FromObjectAsJson("Y29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0"), BinaryData.FromObjectAsJson("c2VkIGRvIGVpdXNtb2QgdGVtcG9yIGluY2lkaWR1bnQ=") },
                AuthenticodeHashList = { BinaryData.FromObjectAsJson("dXQgbGFib3JlIGV0IGRvbG9yZSBtYWduYSBhbGlxdWE="), BinaryData.FromObjectAsJson("IFV0IGVuaW0gYWQgbWluaW0gdmVuaWFt") },
            };
            Operation<SignResult> operation = await client.SignAsync(WaitUntil.Completed, "YourAccountName", "YourCertificateProfileName", body);
            SignResult responseData = operation.Value;
        }
    }
}
